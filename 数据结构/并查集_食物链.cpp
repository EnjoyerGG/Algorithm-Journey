/**
题目描述：
动物王国中有三类动物 A,B,C，这三类动物的食物链构成了有趣的环形：A吃B，B吃C，C吃A。
现有N个动物，以1∼N编号。
每个动物都是 A,B,C中的一种，但是我们并不知道它到底是哪一种。
有人用两种说法对这N个动物所构成的食物链关系进行描述：
第一种说法是 1 X Y，表示 X 和 Y是同类。
第二种说法是 2 X Y，表示 X 吃 Y。

此人对 N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。
当一句话满足下列三条之一时，这句话就是假话，否则就是真话。
1. 当前的话与前面的某些真的话冲突，就是假话；
2. 当前的话中X或Y比N大，就是假话；
3. 当前的话表示X吃X，就是假话。
你的任务是根据给定的N和K句话，输出假话的总数。

输入样例：
100 7 //100为动物数量，7为句子数量
1 101 1
2 1 2
2 2 3
2 3 3
1 1 3
2 3 1
1 5 5
输出样例：
3
**/

// 以某一点到根节点的距离来判断其种类：（模3）
// 如果距离为1，表示其可以吃根节点；
// 如果距离为2，表示其被根节点吃；
// 如果距离为3，表示其与根节点同类；
// 做路径压缩，将所有点的父节点直接指向根节点，然后取模3。
// *只要判断和根节点的关系即可，不需要判断具体是哪种动物！！！！！

#include <iostream>
using namespace std;
const int N = 50010;
int n, m;
int p[N], d[N]; // d[i]表示i到父节点的距离，更新后表示i到根节点的距离

int find(int x)
{
    if (p[x] != x)
    {
        int t = find(p[x]); // 存储根节点
        d[x] += d[p[x]];    // 更新距离，x到p[x]和p[x]到根节点的距离之和
        p[x] = t;           // 路径压缩,此时p[x]已经是根节点了
    }
    return p[x];
}

int main()
{
    scanf("%d%d", &n, &m);

    for (int i = 1; i <= n; i++)
    {
        p[i] = i;
    }

    int res = 0;
    while (m--)
    {
        int t, x, y;
        scanf("%d%d%d", &t, &x, &y);

        if (x > n || y > n)
        {
            res++; // x或y比n大，假话
        }
        else
        {
            int px = find(x), py = find(y);
            if (t == 1)
            {
                if (px == py && (d[x] - d[y]) % 3)
                {
                    res++;
                }
                else if (px != py)
                {
                    p[px] = py;
                    d[px] = d[y] - d[x];
                }
            }
            else
            {
                if (px == py && (d[x] - d[y] - 1) % 3)
                {
                    res++;
                }
                else if (px != py)
                {
                    p[px] = py;
                    d[px] = d[y] - d[x] + 1; // x吃y，距离+1
                }
            }
        }
    }
    printf("%d\n", res);
    return 0;
}